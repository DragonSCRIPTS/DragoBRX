%%bash
cat << 'EOF' > robloxAI.js
// Importa fetch do node-fetch
const fetch = require('node-fetch');

class RobloxAI {
  constructor() {
    this.trainingData = [];
    this.questionsData = [];
    this.isLoaded = false;
    this.baseApiURL = 'https://api.github.com/repos/DragonSCRIPTS/DragoBRX/contents/';
    this.token = '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';
    this.headers = {
      'Authorization': `token ${this.token}`,
      'Accept': 'application/vnd.github.v3+json'
    };
  }

  async initialize() {
    try {
      await this.loadTrainingFiles();
      await this.loadQuestionsFile();
      this.isLoaded = true;
    } catch (error) {
      console.error('Erro ao inicializar RobloxAI:', error);
      throw error;
    }
  }

  async loadTrainingFiles() {
    const folder = 'respostas';
    try {
      const response = await fetch(`${this.baseApiURL}${folder}`, { headers: this.headers });
      if (!response.ok) {
        return; // Silencia erro de listagem de arquivos
      }
      const files = await response.json();
      const jsonFiles = files.filter(file => file.name.endsWith('.json'));

      for (const file of jsonFiles) {
        try {
          const fileResponse = await fetch(file.download_url, { headers: this.headers });
          if (!fileResponse.ok) {
            continue; // Silencia erro de carregamento de arquivo
          }
          const text = await fileResponse.text();
          let data;
          try {
            data = JSON.parse(text);
          } catch (parseErr) {
            continue; // Silencia erro de JSON inválido
          }
          if (Array.isArray(data)) {
            this.trainingData.push(...data);
          }
        } catch (err) {
          continue; // Silencia erro de busca
        }
      }
    } catch (err) {
      // Silencia erro geral
    }
  }

  async loadQuestionsFile() {
    const fileName = 'perguntas_roblox_studio.json';
    try {
      const response = await fetch(`${this.baseApiURL}${fileName}`, { headers: this.headers });
      if (!response.ok) {
        return; // Silencia erro de arquivo não encontrado
      }
      const file = await response.json();
      const fileResponse = await fetch(file.download_url, { headers: this.headers });
      if (!fileResponse.ok) {
        return; // Silencia erro de carregamento
      }
      const text = await fileResponse.text();
      let data;
      try {
        data = JSON.parse(text);
      } catch (parseErr) {
        return; // Silencia erro de JSON inválido
      }
      if (Array.isArray(data)) {
        this.questionsData = data;
      }
    } catch (err) {
      // Silencia erro geral
    }
  }

  async processRequest(userInput) {
    if (!this.isLoaded) {
      await this.initialize();
    }
    const cleanInput = this.normalizeText(userInput);
    const bestMatch = this.findBestMatch(cleanInput);
    if (bestMatch) {
      return `Aqui está seu código, direto do Brx!\n\n${bestMatch.data.response_code}`;
    } else {
      return 'Nenhum código encontrado para essa solicitação. Tente reformular sua pergunta.';
    }
  }

  findBestMatch(userInput) {
    let bestMatch = null;
    let highestScore = 0;
    for (const item of this.trainingData) {
      if (!item.requests) continue;
      for (const request of item.requests) {
        const score = this.calculateSimilarity(userInput, request);
        if (score > highestScore && score > 0.3) {
          highestScore = score;
          bestMatch = { data: item, confidence: score, matchedRequest: request };
        }
      }
    }
    if (this.questionsData.length > 0) {
      for (const question of this.questionsData) {
        const original = question.original || '';
        const variation = question.variation || '';
        const scoreOrig = this.calculateSimilarity(userInput, original);
        const scoreVar = this.calculateSimilarity(userInput, variation);
        const maxScore = Math.max(scoreOrig, scoreVar);
        if (maxScore > highestScore && maxScore > 0.3) {
          const related = this.findRelatedTraining(question.category, original);
          if (related) {
            highestScore = maxScore;
            bestMatch = {
              data: related,
              confidence: maxScore,
              matchedRequest: scoreOrig >= scoreVar ? original : variation
            };
          }
        }
      }
    }
    return bestMatch;
  }

  calculateSimilarity(text1, text2) {
    const normalized1 = this.normalizeText(text1);
    const normalized2 = this.normalizeText(text2);
    const robloxKeywords = [
      'npc', 'gui', 'script', 'part', 'player', 'character', 'humanoid',
      'workspace', 'game', 'service', 'remote', 'function', 'event',
      'inventory', 'dialog', 'cameratwo', 'tween', 'animation', 'sound',
      'leaderboard', 'spawn', 'teleport', 'damage', 'health', 'shop',
      'checkpoint', 'zone', 'portal', 'level', 'experience', 'clan',
      'pet', 'mount', 'weather', 'elevator', 'mining', 'tower', 'defense'
    ];
    let keywordScore = 0;
    for (const kw of robloxKeywords) {
      if (normalized1.includes(kw) && normalized2.includes(kw)) {
        keywordScore += 0.1;
      }
    }
    const words1 = normalized1.split(' ').filter(w => w.length > 2);
    const words2 = normalized2.split(' ').filter(w => w.length > 2);
    const common = words1.filter(w => words2.includes(w));
    const wordSim = common.length / Math.max(words1.length || 1, words2.length || 1);
    const substrScore = this.longestCommonSubstring(normalized1, normalized2) /
                        Math.max(normalized1.length || 1, normalized2.length || 1);
    return (wordSim * 0.5) + (substrScore * 0.3) + (keywordScore * 0.2);
  }

  findRelatedTraining(category, original) {
    const categoryKeywords = {
      'Pedidos de Scripts Básicos': ['basic', 'simples', 'npc', 'dialog', 'inventory'],
      'Sistemas de Jogo': ['system', 'game', 'player', 'mechanics'],
      'Interface e GUI': ['gui', 'interface', 'button', 'menu', 'screen'],
      'Efeitos e Animações': ['effect', 'animation', 'tween', 'visual']
    };
    const keywords = categoryKeywords[category] || [];
    const searchText = original.toLowerCase();
    for (const item of this.trainingData) {
      if (!item.requests) continue;
      for (const req of item.requests) {
        const reqLower = req.toLowerCase();
        for (const kw of keywords) {
          if (searchText.includes(kw) && reqLower.includes(kw)) {
            return item;
          }
        }
        if (this.calculateSimilarity(searchText, reqLower) > 0.4) {
          return item;
        }
      }
    }
    return null;
  }

  normalizeText(text) {
    if (typeof text !== 'string') return '';
    return text.toLowerCase()
               .replace(/[^\w\s]/g, ' ')
               .replace(/\s+/g, ' ')
               .trim();
  }

  longestCommonSubstring(str1, str2) {
    let longest = 0;
    for (let i = 0; i < str1.length; i++) {
      for (let j = 0; j < str2.length; j++) {
        let k = 0;
        while (str1[i+k] === str2[j+k] && i+k < str1.length && j+k < str2.length) {
          k++;
        }
        if (k > longest) longest = k;
      }
    }
    return longest;
  }

  generateExplanation(trainingItem) {
    const code = trainingItem.response_code || '';
    const lines = code.split('\n');
    let explanation = "Este código faz o seguinte:\n\n";
    const comments = lines.filter(line => line.trim().startsWith('--'));
    if (comments.length > 0) {
      explanation += " " + comments[0].replace('--', '').trim() + "\n\n";
    }
    if (code.includes('Instance.new')) explanation += "Cria novos objetos/partes no jogo\n";
    if (code.includes('Touched:Connect')) explanation += "Detecta quando o jogador toca em algo\n";
    if (code.includes('ScreenGui')) explanation += "Cria interface gráfica para o jogador\n";
    if (code.includes('TweenService')) explanation += "Usa animações suaves\n";
    if (code.includes('UserInputService')) explanation += "Detecta entrada do jogador\n";
    return explanation;
  }

  getSuggestions() {
    const randomSuggestions = [];
    const categories = [...new Set(
      this.trainingData
        .filter(item => Array.isArray(item.requests) && item.requests.length > 0)
        .map(item => item.requests[0].split(' ').slice(0, 3).join(' '))
    )];
    for (let i = 0; i < Math.min(3, categories.length); i++) {
      const idx = Math.floor(Math.random() * categories.length);
      randomSuggestions.push(categories[idx]);
    }
    return randomSuggestions;
  }

  async refresh() {
    this.trainingData = [];
    this.questionsData = [];
    this.isLoaded = false;
    await this.initialize();
  }

  getStats() {
    return {
      trainingExamples: this.trainingData.length,
      questions: this.questionsData.length,
      categories: [...new Set(this.questionsData.map(q => q.category))],
      isLoaded: this.isLoaded
    };
  }
}

(async () => {
  const robloxAI = new RobloxAI();
  try {
    await robloxAI.initialize();
    const question = "Quero um sistema de loja GUI para jogador";
    const response = await robloxAI.processRequest(question);
    console.log(response);
  } catch (err) {
    console.error("Erro em execução:", err);
  }
})();
EOF
node robloxAI.js

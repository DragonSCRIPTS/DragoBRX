[
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Quero um código que organiza missões no mundo com objetivo exploração.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Fazer apenas a função que organiza um quests no jogo para players.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = game.ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Quero apenas a função que gerencia um objetivos com exploração para um personagens.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = game.ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Gerar um programa em Lua que organiza quests com derrota de inimigos no mapa.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Quero apenas a função que gerencia um objetivos com exploração para um players.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = game.ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Fazer um sistema de gerenciamento de tarefas que administra com construção.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Criar um código que controla quests no jogo com construção e recompensas moedas.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Gerar um programa que controla quests com construção no mundo para personagens.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Quero um código que administra quests com construção para personagens em mapa.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Fazer um código para administra quests no jogo com recompensas pontos.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Criar um sistema que gerencia quests no mapa com recompensas equipamentos para players.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Criar um programa que administra quests com exploração no mundo para personagens.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Criar um sistema que gerencia quests no mapa com recompensas pontos para players.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Gerar um script que controla tarefas com derrota de inimigos no mapa para players.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Fazer um sistema de gerenciamento de quests que administra com derrota de inimigos.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Fazer um sistema para gerencia objetivos no mundo com recompensas equipamentos.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Quero um código que administra objetivos no jogo com objetivo exploração.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Criar somente a parte que define como missões são organiza com exploração.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Quero apenas a função que organiza um objetivos com derrota de inimigos para um players.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = game.ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Fazer apenas a função que organiza um tarefas no mapa para players.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = game.ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Gerar um programa em Lua que controla objetivos com exploração no mapa.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Quero um sistema que organiza missões com construção para players em mapa.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Criar somente a parte que define como tarefas são gerencia com derrota de inimigos.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Fazer um programa para Roblox que gerencia tarefas com exploração em mundo.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Fazer apenas a função que gerencia um objetivos no mundo para personagens.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = game.ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Quero um código que organiza tarefas no mapa com objetivo exploração.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Quero um código simples que gerencia tarefas sem loop de atualização.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Fazer um código para controla objetivos no mundo com recompensas itens.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Quero apenas a função que controla um missões com derrota de inimigos para um jogadores.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = game.ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Criar um script que controla missões com derrota de inimigos no mundo para personagens.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Gerar um programa que administra tarefas com exploração no mundo para personagens.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Criar um script que gerencia tarefas com derrota de inimigos no mapa para players.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Criar um sistema que controla tarefas no mundo com exploração e recompensas moedas.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Fazer apenas a função que controla um tarefas no mundo para personagens.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = game.ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Gerar um código que administra missões com exploração no mapa para jogadores.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Gerar só as configurações para administra tarefas com construção.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Quero um script que gerencia objetivos com construção para personagens em mapa.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Criar um script que organiza tarefas no mundo com coleta de itens e recompensas moedas.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Criar um programa que organiza quests com coleta de itens no mundo para jogadores.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Criar um sistema que gerencia tarefas no jogo com recompensas moedas para personagens.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Fazer um sistema de gerenciamento de quests que organiza com derrota de inimigos.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Criar somente a parte que define como missões são organiza com coleta de itens.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Gerar um programa em Lua que organiza missões com exploração no mapa.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Criar um programa que organiza quests no mundo com derrota de inimigos e recompensas equipamentos.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Gerar só as configurações para gerencia tarefas com coleta de itens.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Fazer um sistema de gerenciamento de tarefas que administra com derrota de inimigos.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Fazer um sistema de gerenciamento de quests que controla com construção.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Fazer um script para administra objetivos no mundo com recompensas moedas.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Fazer um código para administra quests no mundo com recompensas moedas.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Criar um script que controla missões no mapa com derrota de inimigos e recompensas pontos.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Criar um código que gerencia quests no mapa com exploração e recompensas pontos.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Gerar um script em Lua que controla quests com construção no jogo.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Quero um código que controla missões no mapa com objetivo derrota de inimigos.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Fazer um código para Roblox que administra objetivos com coleta de itens em mundo.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Quero um código simples que administra tarefas sem loop de atualização.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Fazer um script para controla tarefas no mapa com recompensas itens.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Gerar um programa que controla tarefas com coleta de itens no mundo para personagens.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Gerar um script que organiza missões com coleta de itens no jogo para jogadores.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Fazer um programa para Roblox que administra missões com construção em mapa.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Fazer um sistema de gerenciamento de missões que gerencia com exploração.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Quero um código que organiza missões no mundo com objetivo construção.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Fazer um sistema de gerenciamento de missões que gerencia com coleta de itens.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Gerar um código que administra missões com coleta de itens no jogo para personagens.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Criar um script que gerencia tarefas com construção no mapa para jogadores.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Gerar um código em Lua que administra missões com exploração no mapa.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Criar um script que organiza missões com construção no mundo para personagens.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Fazer um script para gerencia objetivos no mundo com recompensas moedas.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Fazer um script para gerencia tarefas no jogo com recompensas itens.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Fazer um código para Roblox que gerencia missões com derrota de inimigos em mapa.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Fazer um programa para Roblox que administra tarefas com derrota de inimigos em mapa.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Fazer um sistema de gerenciamento de missões que organiza com derrota de inimigos.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Gerar só as configurações para controla quests com construção.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Quero um código simples que gerencia missões sem loop de atualização.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Gerar um programa que administra tarefas com coleta de itens no mapa para players.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Criar somente a parte que define como quests são gerencia com derrota de inimigos.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Gerar um programa que administra objetivos com exploração no mundo para jogadores.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Criar um sistema que gerencia quests com coleta de itens no mapa para jogadores.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Criar um script que administra tarefas no mundo com exploração e recompensas itens.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Gerar um script que controla objetivos com exploração no mundo para players.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Fazer um sistema de gerenciamento de missões que administra com construção.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Fazer apenas a função que gerencia um tarefas no jogo para personagens.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = game.ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Criar um sistema que controla objetivos no mapa com recompensas moedas para players.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Gerar um código em Lua que organiza objetivos com construção no mapa.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Quero um código simples que organiza quests sem loop de atualização.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Criar um sistema que organiza tarefas no jogo com recompensas pontos para jogadores.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Quero um código que controla missões no jogo com objetivo derrota de inimigos.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Criar um código que controla objetivos com construção no mundo para personagens.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Quero apenas a função que administra um quests com coleta de itens para um jogadores.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = game.ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Gerar um script que organiza quests com exploração no mapa para players.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Criar um programa que administra objetivos no mapa com exploração e recompensas equipamentos.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Gerar um script em Lua que administra tarefas com derrota de inimigos no mundo.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Quero um código simples que organiza tarefas sem loop de atualização.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Gerar um script que administra quests com exploração no jogo para personagens.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Gerar um programa em Lua que organiza objetivos com exploração no mundo.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Gerar só as configurações para controla quests com derrota de inimigos.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Quero um código que gerencia tarefas no mundo com objetivo derrota de inimigos.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Fazer um sistema de gerenciamento de tarefas que organiza com construção.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Criar um sistema que organiza missões no jogo com recompensas moedas para personagens.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Fazer um sistema de gerenciamento de tarefas que organiza com exploração.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Quero um código simples que organiza quests sem loop de atualização.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Quero um programa que gerencia tarefas com derrota de inimigos para players em mapa.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Quero apenas a função que gerencia um tarefas com exploração para um personagens.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = game.ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Criar um código que controla objetivos com exploração no jogo para personagens.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Quero um código que organiza tarefas no jogo com objetivo exploração.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Criar somente a parte que define como objetivos são gerencia com coleta de itens.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Quero um código simples que gerencia missões sem loop de atualização.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Gerar um programa em Lua que gerencia missões com coleta de itens no jogo.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Criar um sistema que organiza missões no mapa com recompensas pontos para jogadores.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Fazer um programa para Roblox que gerencia objetivos com coleta de itens em mapa.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Quero um código que gerencia quests com exploração para jogadores em mundo.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Criar um código que administra tarefas no mapa com coleta de itens e recompensas pontos.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Gerar só as configurações para controla objetivos com coleta de itens.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Quero apenas a função que gerencia um tarefas com exploração para um players.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = game.ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Fazer apenas a função que organiza um quests no mapa para personagens.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = game.ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Criar somente a parte que define como objetivos são administra com exploração.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Fazer um sistema de gerenciamento de tarefas que gerencia com derrota de inimigos.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Quero um código que gerencia objetivos com coleta de itens para jogadores em mapa.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Gerar um script que controla tarefas com exploração no jogo para personagens.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Quero um programa que controla tarefas com coleta de itens para jogadores em mundo.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Criar um script que administra missões com derrota de inimigos no jogo para players.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Fazer um programa para Roblox que administra objetivos com exploração em mundo.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Quero apenas a função que controla um tarefas com derrota de inimigos para um players.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = game.ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Quero um sistema que organiza tarefas com coleta de itens para personagens em mapa.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Quero um código que controla missões no mundo com objetivo exploração.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Gerar um programa que gerencia objetivos com construção no mundo para personagens.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Quero um código que controla tarefas no mundo com objetivo derrota de inimigos.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Quero um código que gerencia tarefas no mapa com objetivo coleta de itens.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Fazer um script para Roblox que administra tarefas com exploração em mapa.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Fazer um sistema de gerenciamento de quests que controla com construção.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Quero um código simples que gerencia tarefas sem loop de atualização.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Quero um sistema que administra quests com construção para personagens em mundo.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Fazer um sistema de gerenciamento de quests que controla com construção.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Gerar um programa que controla objetivos com exploração no mapa para players.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Criar somente a parte que define como missões são controla com construção.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Criar um sistema que controla missões com construção no mundo para players.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Criar um sistema que organiza quests no mundo com coleta de itens e recompensas moedas.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Gerar só as configurações para administra objetivos com exploração.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Fazer um script para controla quests no mundo com recompensas pontos.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Criar um programa que administra missões com derrota de inimigos no jogo para players.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Quero apenas a função que organiza um tarefas com derrota de inimigos para um personagens.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = game.ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Criar um script que gerencia objetivos com construção no mapa para personagens.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Gerar um sistema que organiza missões com exploração no mundo para jogadores.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Fazer apenas a função que gerencia um quests no mundo para jogadores.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = game.ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Criar um sistema que organiza objetivos no mundo com recompensas itens para players.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Criar um script que administra missões com derrota de inimigos no mapa para jogadores.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Fazer um programa para controla objetivos no jogo com recompensas itens.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Fazer um sistema de gerenciamento de missões que administra com exploração.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Criar um script que organiza quests no jogo com derrota de inimigos e recompensas itens.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Quero um programa que gerencia tarefas com construção para personagens em mundo.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Quero apenas a função que administra um quests com exploração para um players.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = game.ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Quero um código que administra missões no mapa com objetivo construção.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Fazer apenas a função que organiza um objetivos no mundo para jogadores.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = game.ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Quero um programa que administra tarefas com exploração para players em mapa.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Criar somente a parte que define como quests são organiza com exploração.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Quero um sistema que gerencia objetivos com coleta de itens para players em mundo.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Criar somente a parte que define como tarefas são organiza com construção.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Fazer um sistema para controla objetivos no mapa com recompensas equipamentos.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Criar um sistema que organiza missões no mundo com recompensas itens para jogadores.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Quero um código que administra objetivos no jogo com objetivo exploração.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Fazer um sistema de gerenciamento de objetivos que administra com construção.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Quero um sistema que controla quests com derrota de inimigos para personagens em mapa.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Quero um código simples que gerencia tarefas sem loop de atualização.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Gerar um script em Lua que controla quests com coleta de itens no jogo.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Criar um sistema que gerencia objetivos no jogo com recompensas itens para personagens.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Gerar um script em Lua que controla tarefas com construção no jogo.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Fazer um sistema para Roblox que gerencia objetivos com construção em mapa.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Criar um sistema que organiza quests no jogo com recompensas itens para jogadores.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Gerar um script em Lua que administra objetivos com derrota de inimigos no mundo.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Criar um código que controla missões com exploração no mundo para players.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Fazer um sistema para Roblox que administra missões com coleta de itens em mundo.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Criar um sistema que administra missões no mapa com recompensas moedas para personagens.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Fazer um código para administra quests no mundo com recompensas equipamentos.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Quero um código que organiza tarefas no jogo com objetivo derrota de inimigos.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Quero apenas a função que gerencia um missões com derrota de inimigos para um jogadores.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = game.ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Criar um sistema que administra tarefas no mundo com derrota de inimigos e recompensas equipamentos.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Quero um código simples que organiza objetivos sem loop de atualização.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Criar um sistema que administra missões no jogo com coleta de itens e recompensas pontos.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Fazer um código para controla missões no mapa com recompensas equipamentos.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Fazer um programa para Roblox que gerencia tarefas com derrota de inimigos em mapa.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Criar somente a parte que define como objetivos são organiza com construção.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Quero um código que administra objetivos no mapa com objetivo exploração.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Quero um código que administra missões no mundo com objetivo coleta de itens.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Fazer um código para controla objetivos no mundo com recompensas moedas.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Gerar só as configurações para organiza tarefas com construção.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Quero um código simples que controla objetivos sem loop de atualização.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Fazer um sistema de gerenciamento de quests que controla com exploração.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Criar um programa que organiza tarefas no mapa com coleta de itens e recompensas moedas.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Gerar um sistema que administra quests com exploração no jogo para players.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Gerar um programa que administra quests com derrota de inimigos no jogo para jogadores.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Gerar um script que organiza tarefas com derrota de inimigos no jogo para jogadores.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Fazer um sistema para organiza missões no jogo com recompensas moedas.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Criar somente a parte que define como quests são controla com exploração.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Criar um código que gerencia objetivos com construção no jogo para jogadores.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Criar somente a parte que define como quests são organiza com coleta de itens.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Criar um código que gerencia quests com coleta de itens no mapa para personagens.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Gerar um sistema em Lua que administra missões com construção no mapa.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Quero apenas a função que organiza um quests com exploração para um players.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = game.ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Gerar um programa em Lua que gerencia missões com exploração no mundo.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Criar um sistema que gerencia missões no jogo com recompensas pontos para players.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  },
  {
    "timestamp": "2025-06-17T13:08:11.359717",
    "source": "Gerado localmente",
    "prompt": "Gerar só as configurações para controla quests com construção.",
    "parameters": {
      "script": {
        "properties": {
          "QuestType": {
            "type": "string",
            "value": "Collect"
          },
          "QuestGoal": {
            "type": "number",
            "value": 5
          },
          "QuestRewardType": {
            "type": "string",
            "value": "Coins"
          },
          "QuestRewardAmount": {
            "type": "number",
            "value": 100
          },
          "QuestDuration": {
            "type": "number",
            "value": 300
          }
        }
      }
    },
    "generated_lua": "--[[\n    Script: QuestSystem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Gerencia missões para jogadores com objetivos e recompensas.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService('Players')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Configurações do sistema de missões\nlocal QUEST_TYPE = \"Collect\"\nlocal QUEST_GOAL = 5\nlocal QUEST_REWARD_TYPE = \"Coins\"\nlocal QUEST_REWARD_AMOUNT = 100\nlocal QUEST_DURATION = 300 -- segundos\n\n-- Tabela de missões ativas\nlocal activeQuests = {}\n\n-- Função que dá recompensa ao completar uma missão\nlocal function completeQuest(player, questData)\n    if questData.rewardType == 'Coins' then\n        local leaderstats = player:FindFirstChild('leaderstats')\n        if leaderstats then\n            local coins = leaderstats:FindFirstChild('Coins')\n            if coins then\n                coins.Value = coins.Value + questData.rewardAmount\n            end\n        end\n    end\n    local progress = player.QuestProgress:FindFirstChild(questData.id)\n    if progress then\n        progress:Destroy()\n    end\n    activeQuests[player.UserId][questData.id] = nil\nend\n\n-- Função que inicializa uma missão para um jogador\nlocal function startQuest(player, questData)\n    if not player:FindFirstChild('QuestProgress') then\n        local progressFolder = Instance.new('Folder')\n        progressFolder.Name = 'QuestProgress'\n        progressFolder.Parent = player\n    end\n    local questId = questData.id\n    local progressValue = player.QuestProgress:FindFirstChild(questId)\n    if not progressValue then\n        progressValue = Instance.new('IntValue')\n        progressValue.Name = questId\n        progressValue.Value = 0\n        progressValue.Parent = player.QuestProgress\n    end\n    if questData.type == 'Collect' then\n        local itemCollected = Instance.new('RemoteEvent')\n        itemCollected.Name = 'ItemCollected_' .. questId\n        itemCollected.Parent = ReplicatedStorage\n        itemCollected.OnServerEvent:Connect(function(plr, item)\n            if plr == player and progressValue.Value < questData.goal then\n                progressValue.Value = progressValue.Value + 1\n                if progressValue.Value >= questData.goal then\n                    completeQuest(player, questData)\n                    itemCollected:Destroy()\n                end\n            end\n        end)\n    end\n    if not activeQuests[player.UserId] then\n        activeQuests[player.UserId] = {}\n    end\n    activeQuests[player.UserId][questData.id] = questData\nend\n\n-- Função que inicializa o sistema para novos jogadores\nPlayers.PlayerAdded:Connect(function(player)\n    local leaderstats = Instance.new('Folder')\n    leaderstats.Name = 'leaderstats'\n    leaderstats.Parent = player\n    local coins = Instance.new('IntValue')\n    coins.Name = 'Coins'\n    coins.Value = 0\n    coins.Parent = leaderstats\n\n    local questData = {\n        id = 'Quest1',\n        type = QUEST_TYPE,\n        goal = QUEST_GOAL,\n        rewardType = QUEST_REWARD_TYPE,\n        rewardAmount = QUEST_REWARD_AMOUNT,\n        duration = QUEST_DURATION\n    }\n    startQuest(player, questData)\nend)",
    "metadata": {
      "script_name": "QuestSystem",
      "location": "ServerScriptService",
      "description": "Gerencia missões para jogadores com objetivos e recompensas no servidor."
    }
  }
]
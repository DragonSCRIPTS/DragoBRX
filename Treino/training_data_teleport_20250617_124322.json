[
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Gerar só as configurações de teletransporte para players a cada 10 segundos.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Gerar um sistema em Lua que desloca jogadores no jogo a cada 10 segundos para coordenadas randômicas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Gerar um código que transfere jogadores a cada dez segundos para lugares randômicas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Criar somente a parte que define onde os jogadores são desloca a cada dez segundos.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer um sistema para Roblox que transfere jogadores a cada dez segundos para pontos variadas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Criar um programa que transfere personagens a cada dez segundos para posições aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Quero um código que transfere players no jogo com intervalo de 10 segundos para posições variadas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Gerar um código que transfere personagens a cada 10 segundos para lugares aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer um sistema para move players no jogo a cada 10 segundos para posições variadas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Gerar um sistema que transfere personagens a cada dez segundos para lugares randômicas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer um script para Roblox que teletransporta personagens a cada dez segundos para pontos randômicas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Quero apenas a função que teletransporta um jogadores para uma posição randômicas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(-50, 50),\n            5,\n            math.random(-50, 50)\n        )\n        if false then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Criar um script que move personagens no mundo a cada 10 segundos para coordenadas X e Z variadas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Criar somente a parte que define onde os jogadores são move a cada 10 segundos.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer um sistema para transfere personagens no jogo a cada dez segundos para posições aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Gerar um código em Lua que desloca jogadores no mundo a cada dez segundos para coordenadas aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Quero um código que desloca players no mapa com intervalo de 10 segundos para posições aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer um sistema de teletransporte para players que teletransporta a cada dez segundos para coordenadas aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Gerar um programa em Lua que desloca jogadores no jogo a cada 10 segundos para coordenadas aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Quero um programa que teletransporta jogadores a cada 10 segundos para locais aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Gerar um script em Lua que move jogadores no jogo a cada 10 segundos para coordenadas aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Quero um script que desloca personagens a cada dez segundos para locais variadas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Criar um código que move jogadores a cada 10 segundos para lugares diferentes.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer apenas a função que transfere um jogadores no jogo para um local variadas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(-50, 50),\n            5,\n            math.random(-50, 50)\n        )\n        if false then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Criar um sistema que teletransporta players no mapa a cada 10 segundos para posições aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer um programa para transfere jogadores no mundo a cada 10 segundos para posições randômicas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Gerar um script em Lua que teletransporta jogadores no jogo a cada dez segundos para coordenadas randômicas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer apenas a função que move um players no jogo para um local aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(-50, 50),\n            5,\n            math.random(-50, 50)\n        )\n        if false then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Gerar só as configurações de teletransporte para players a cada 10 segundos.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Quero um sistema que desloca players a cada 10 segundos para locais variadas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Criar somente a parte que define onde os jogadores são teletransporta a cada 10 segundos.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Criar somente a parte que define onde os jogadores são desloca a cada dez segundos.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Criar um sistema que move players a cada dez segundos para lugares diferentes.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer um programa para teletransporta personagens no mapa a cada dez segundos para posições variadas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Criar somente a parte que define onde os jogadores são teletransporta a cada 10 segundos.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer um sistema para Roblox que desloca personagens a cada 10 segundos para pontos aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer um programa para transfere personagens no mapa a cada dez segundos para posições randômicas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Quero um código que desloca players no mapa com intervalo de dez segundos para posições variadas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Gerar um sistema em Lua que desloca personagens no jogo a cada dez segundos para coordenadas aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer um script para Roblox que move players a cada dez segundos para pontos randômicas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Quero apenas a função que teletransporta um personagens para uma posição aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(-50, 50),\n            5,\n            math.random(-50, 50)\n        )\n        if false then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Criar um código que desloca jogadores no mapa a cada dez segundos para coordenadas X e Z aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer um código para Roblox que teletransporta players a cada 10 segundos para pontos randômicas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Quero apenas a função que teletransporta um jogadores para uma posição randômicas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(-50, 50),\n            5,\n            math.random(-50, 50)\n        )\n        if false then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer um script para Roblox que desloca players a cada dez segundos para pontos randômicas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer um sistema de teletransporte para jogadores que transfere a cada 10 segundos para coordenadas aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer apenas a função que move um jogadores no mapa para um local variadas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(-50, 50),\n            5,\n            math.random(-50, 50)\n        )\n        if false then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Quero apenas a função que move um players para uma posição variadas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(-50, 50),\n            5,\n            math.random(-50, 50)\n        )\n        if false then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Quero um programa que move jogadores a cada dez segundos para locais randômicas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Quero um código simples que transfere personagens para variadas sem loop.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Gerar só as configurações de teletransporte para personagens a cada 10 segundos.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Gerar um script que move personagens a cada dez segundos para lugares aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Quero um código simples que desloca jogadores para randômicas sem loop.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Criar um sistema que transfere jogadores a cada dez segundos para coordenadas aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer apenas a função que move um jogadores no mundo para um local variadas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(-50, 50),\n            5,\n            math.random(-50, 50)\n        )\n        if false then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Quero um código simples que move jogadores para variadas sem loop.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Criar um sistema que teletransporta players no mundo a cada dez segundos para lugares diferentes.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer um sistema de teletransporte para players que transfere a cada dez segundos para posições aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Quero um código simples que move players para randômicas sem loop.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Quero um código que desloca players no jogo com intervalo de 10 segundos para posições variadas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Criar um código que teletransporta jogadores a cada dez segundos para posições aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Gerar um código que transfere players a cada 10 segundos para lugares variadas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Quero um código que desloca jogadores no mundo com intervalo de 10 segundos para posições randômicas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Gerar um script que desloca players a cada dez segundos para lugares variadas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Criar um sistema que desloca personagens no jogo a cada dez segundos para coordenadas aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Criar somente a parte que define onde os personagens são desloca a cada dez segundos.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Criar um sistema que move jogadores no mundo a cada 10 segundos para coordenadas X e Z aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Quero um código que teletransporta personagens no jogo com intervalo de dez segundos para posições randômicas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Criar um script que move players a cada dez segundos para lugares diferentes.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Quero um código que transfere players no mundo com intervalo de dez segundos para posições variadas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Criar somente a parte que define onde os players são transfere a cada 10 segundos.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Gerar um script em Lua que teletransporta personagens no jogo a cada dez segundos para coordenadas variadas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Criar um código que transfere jogadores no jogo a cada dez segundos para coordenadas X e Z aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Quero um script que teletransporta players a cada 10 segundos para locais aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer um sistema de teletransporte para personagens que move a cada dez segundos para lugares diferentes.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Gerar um sistema em Lua que transfere personagens no mundo a cada dez segundos para coordenadas variadas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Gerar um sistema em Lua que desloca jogadores no jogo a cada dez segundos para coordenadas variadas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer apenas a função que transfere um players no jogo para um local aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(-50, 50),\n            5,\n            math.random(-50, 50)\n        )\n        if false then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer um código para desloca personagens no mapa a cada 10 segundos para posições aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Criar somente a parte que define onde os personagens são teletransporta a cada dez segundos.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Gerar um código que move players a cada 10 segundos para lugares variadas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer um sistema de teletransporte para players que transfere a cada 10 segundos para coordenadas aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer um programa para Roblox que transfere personagens a cada 10 segundos para pontos randômicas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Quero um código simples que transfere jogadores para aleatórias sem loop.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Quero um código simples que transfere jogadores para randômicas sem loop.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Quero apenas a função que desloca um jogadores para uma posição aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(-50, 50),\n            5,\n            math.random(-50, 50)\n        )\n        if false then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer apenas a função que move um personagens no mapa para um local aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(-50, 50),\n            5,\n            math.random(-50, 50)\n        )\n        if false then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Criar um sistema que transfere players no mundo a cada dez segundos para coordenadas aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Quero um código simples que desloca jogadores para variadas sem loop.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Criar um código que move jogadores a cada 10 segundos para lugares diferentes.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Quero um código que transfere players no mapa com intervalo de 10 segundos para posições aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer um programa para Roblox que transfere players a cada 10 segundos para pontos aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer um sistema para Roblox que transfere players a cada 10 segundos para pontos aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Criar somente a parte que define onde os personagens são desloca a cada dez segundos.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer um código para Roblox que teletransporta personagens a cada dez segundos para pontos aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer apenas a função que transfere um jogadores no mapa para um local randômicas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(-50, 50),\n            5,\n            math.random(-50, 50)\n        )\n        if false then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Gerar um programa em Lua que move personagens no jogo a cada 10 segundos para coordenadas variadas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Criar um sistema que desloca personagens no mapa a cada 10 segundos para posições aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Quero um código simples que teletransporta personagens para variadas sem loop.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Criar um código que transfere players no mundo a cada 10 segundos para coordenadas X e Z randômicas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Gerar só as configurações de teletransporte para jogadores a cada 10 segundos.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer um programa para move players no mundo a cada dez segundos para posições aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Criar somente a parte que define onde os personagens são teletransporta a cada 10 segundos.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Quero um código que desloca personagens no mundo com intervalo de 10 segundos para posições aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer apenas a função que transfere um jogadores no mapa para um local aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(-50, 50),\n            5,\n            math.random(-50, 50)\n        )\n        if false then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Quero um código que transfere personagens a cada dez segundos para locais aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer um script para transfere players no mapa a cada 10 segundos para posições variadas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Quero um código simples que move personagens para randômicas sem loop.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Gerar um sistema que move players a cada 10 segundos para lugares randômicas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer um sistema de teletransporte para personagens que teletransporta a cada dez segundos para posições aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Criar um sistema que teletransporta jogadores no mapa a cada dez segundos para lugares diferentes.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer um sistema de teletransporte para personagens que move a cada 10 segundos para lugares diferentes.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Gerar só as configurações de teletransporte para personagens a cada dez segundos.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Gerar só as configurações de teletransporte para jogadores a cada dez segundos.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer um programa para transfere personagens no mundo a cada 10 segundos para posições randômicas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Quero um código simples que teletransporta players para variadas sem loop.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Quero um sistema que desloca players a cada 10 segundos para locais variadas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Quero um código que desloca jogadores no mundo com intervalo de dez segundos para posições variadas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Quero um código que teletransporta personagens no mapa com intervalo de dez segundos para posições randômicas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Criar somente a parte que define onde os personagens são teletransporta a cada 10 segundos.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer um script para move players no mapa a cada dez segundos para posições variadas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Criar um código que move personagens a cada dez segundos para posições aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer um sistema para Roblox que teletransporta jogadores a cada dez segundos para pontos randômicas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Gerar só as configurações de teletransporte para players a cada dez segundos.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer apenas a função que teletransporta um jogadores no mapa para um local aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(-50, 50),\n            5,\n            math.random(-50, 50)\n        )\n        if false then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Criar um script que desloca jogadores no jogo a cada dez segundos para coordenadas X e Z aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Criar somente a parte que define onde os personagens são teletransporta a cada dez segundos.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer apenas a função que desloca um players no jogo para um local aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(-50, 50),\n            5,\n            math.random(-50, 50)\n        )\n        if false then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Criar um sistema que transfere personagens no mundo a cada dez segundos para lugares diferentes.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Gerar só as configurações de teletransporte para players a cada dez segundos.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Criar um sistema que desloca jogadores no mundo a cada 10 segundos para lugares diferentes.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Gerar só as configurações de teletransporte para players a cada 10 segundos.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer um código para Roblox que desloca jogadores a cada 10 segundos para pontos randômicas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Quero apenas a função que teletransporta um players para uma posição aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(-50, 50),\n            5,\n            math.random(-50, 50)\n        )\n        if false then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Criar um sistema que desloca jogadores no mapa a cada 10 segundos para lugares diferentes.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Gerar um programa em Lua que move personagens no mundo a cada 10 segundos para coordenadas randômicas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Gerar só as configurações de teletransporte para players a cada 10 segundos.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Gerar um programa em Lua que desloca personagens no jogo a cada dez segundos para coordenadas variadas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer um sistema de teletransporte para jogadores que teletransporta a cada 10 segundos para posições aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer um sistema de teletransporte para personagens que desloca a cada 10 segundos para coordenadas aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Gerar um código que transfere players a cada 10 segundos para lugares randômicas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Criar um sistema que desloca players no mapa a cada 10 segundos para posições aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer apenas a função que transfere um personagens no mundo para um local aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(-50, 50),\n            5,\n            math.random(-50, 50)\n        )\n        if false then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Criar um código que transfere personagens a cada 10 segundos para coordenadas aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Criar um sistema que teletransporta personagens a cada 10 segundos para posições aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer um programa para teletransporta players no mapa a cada 10 segundos para posições aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Quero um código que move players no mapa com intervalo de 10 segundos para posições aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Quero apenas a função que teletransporta um personagens para uma posição randômicas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(-50, 50),\n            5,\n            math.random(-50, 50)\n        )\n        if false then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Criar um sistema que move players no jogo a cada dez segundos para coordenadas X e Z variadas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer apenas a função que desloca um personagens no mapa para um local aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(-50, 50),\n            5,\n            math.random(-50, 50)\n        )\n        if false then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Gerar um código em Lua que move jogadores no mapa a cada dez segundos para coordenadas aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Gerar um código que move players a cada dez segundos para lugares aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer um sistema de teletransporte para players que teletransporta a cada 10 segundos para coordenadas aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Quero um sistema que transfere jogadores a cada dez segundos para locais randômicas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer um código para Roblox que transfere jogadores a cada dez segundos para pontos aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Criar um sistema que transfere personagens no jogo a cada dez segundos para posições aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Criar somente a parte que define onde os personagens são teletransporta a cada 10 segundos.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Criar um sistema que teletransporta players no jogo a cada dez segundos para coordenadas X e Z variadas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Criar somente a parte que define onde os jogadores são teletransporta a cada 10 segundos.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Gerar um programa em Lua que move jogadores no jogo a cada dez segundos para coordenadas randômicas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Quero um código simples que transfere personagens para randômicas sem loop.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Gerar um código que transfere personagens a cada 10 segundos para lugares randômicas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Gerar só as configurações de teletransporte para jogadores a cada 10 segundos.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Criar somente a parte que define onde os jogadores são desloca a cada 10 segundos.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Gerar um código em Lua que desloca jogadores no mapa a cada dez segundos para coordenadas aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer um script para Roblox que teletransporta personagens a cada dez segundos para pontos variadas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Criar um script que desloca personagens a cada 10 segundos para lugares diferentes.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer apenas a função que transfere um jogadores no jogo para um local aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(-50, 50),\n            5,\n            math.random(-50, 50)\n        )\n        if false then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Criar um programa que transfere players a cada dez segundos para lugares diferentes.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer apenas a função que move um personagens no mundo para um local randômicas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(-50, 50),\n            5,\n            math.random(-50, 50)\n        )\n        if false then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer apenas a função que desloca um personagens no mapa para um local aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(-50, 50),\n            5,\n            math.random(-50, 50)\n        )\n        if false then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Gerar um script em Lua que desloca players no jogo a cada 10 segundos para coordenadas randômicas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer um sistema de teletransporte para personagens que teletransporta a cada dez segundos para coordenadas aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Quero um código simples que teletransporta jogadores para aleatórias sem loop.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Quero apenas a função que desloca um players para uma posição aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(-50, 50),\n            5,\n            math.random(-50, 50)\n        )\n        if false then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Criar um programa que desloca players a cada dez segundos para coordenadas aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer um sistema para Roblox que move personagens a cada dez segundos para pontos variadas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Quero um código que teletransporta jogadores no mapa com intervalo de 10 segundos para posições aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Criar somente a parte que define onde os players são transfere a cada 10 segundos.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Quero um código simples que teletransporta players para variadas sem loop.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Criar um script que transfere personagens a cada dez segundos para coordenadas aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Quero um sistema que desloca jogadores a cada dez segundos para locais variadas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Quero um código simples que move players para aleatórias sem loop.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Quero um código simples que move players para variadas sem loop.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Quero um código que teletransporta players a cada 10 segundos para locais variadas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Criar um programa que move players a cada dez segundos para posições aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer um código para Roblox que transfere players a cada 10 segundos para pontos randômicas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Quero apenas a função que desloca um jogadores para uma posição aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(-50, 50),\n            5,\n            math.random(-50, 50)\n        )\n        if false then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Gerar um programa que teletransporta personagens a cada 10 segundos para lugares aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Criar somente a parte que define onde os jogadores são move a cada 10 segundos.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Gerar só as configurações de teletransporte para jogadores a cada 10 segundos.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Criar um sistema que transfere jogadores no mapa a cada dez segundos para coordenadas aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Gerar um sistema em Lua que teletransporta players no mundo a cada dez segundos para coordenadas randômicas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer um sistema para transfere players no mapa a cada dez segundos para posições randômicas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer apenas a função que desloca um players no mundo para um local aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(-50, 50),\n            5,\n            math.random(-50, 50)\n        )\n        if false then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Criar somente a parte que define onde os jogadores são move a cada dez segundos.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer um código para move players no mapa a cada dez segundos para posições aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer um sistema de teletransporte para jogadores que desloca a cada dez segundos para lugares diferentes.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Gerar um programa que teletransporta personagens a cada 10 segundos para lugares randômicas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: TeleportPlayer\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descrição: Teletransporta todos os jogadores a cada X segundos para posições aleatórias.\n]]\n\n-- Serviços necessários\nlocal Players = game:GetService(\"Players\")\n\n-- Configurações de teletransporte\nlocal TELEPORT_INTERVAL = 10 -- segundos\nlocal TELEPORT_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\nlocal ADD_EFFECT = false\n\n-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(TELEPORT_AREA.MinX, TELEPORT_AREA.MaxX),\n            TELEPORT_AREA.Y,\n            math.random(TELEPORT_AREA.MinZ, TELEPORT_AREA.MaxZ)\n        )\n        if ADD_EFFECT then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend\n\n-- Loop principal para teletransportar todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        teleportPlayer(player)\n    end\n    wait(TELEPORT_INTERVAL)\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:43:22.392635",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer apenas a função que teletransporta um players no mapa para um local variadas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Função que teletransporta um jogador\nlocal function teleportPlayer(player)\n    if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then\n        local rootPart = player.Character.HumanoidRootPart\n        rootPart.Position = Vector3.new(\n            math.random(-50, 50),\n            5,\n            math.random(-50, 50)\n        )\n        if false then\n            local effect = Instance.new(\"ParticleEmitter\")\n            effect.Texture = \"rbxassetid://1234567890\" -- Substitua pelo ID do efeito\n            effect.Parent = rootPart\n            wait(1)\n            effect:Destroy()\n        end\n    end\nend",
    "metadata": {
      "script_name": "TeleportPlayer",
      "location": "ServerScriptService",
      "description": "Teletransporta todos os jogadores a cada X segundos para posições aleatórias no mundo."
    }
  }
]
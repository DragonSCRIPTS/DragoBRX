[
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Gerar um programa Lua que coloca peças no jogo a cada cinco segundos em coordenadas sortidas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Quero um código reduzido que gera blocos em randômicas sem loop.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Criar um programa que gera blocos ao workspace a cada 5 segundos em posições X e Z aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Gerar um spawner Lua que cria peças no workspace a cada 5 segundos em coordenadas aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Gerar um script Lua que gera blocos no jogo a cada cinco segundos em coordenadas aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Criar só a parte que define onde os objetos aparecem a cada cinco segundos.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Quero só a função que adiciona um blocos em posição sortidas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = Vector3.new(2, 2, 2)\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(-50, 50),\n        5,\n        math.random(-50, 50)\n    )\n    item.Parent = game:GetService(\"Workspace\")\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Quero um código que coloca blocos no jogo com intervalo de 5 segundos e posições randômicas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Criar um spawner que cria peças no mundo a cada 5 segundos em locais aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Quero um código que coloca peças no mundo com intervalo de cinco segundos e posições variadas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Gerar apenas a configuração de spawn para blocos a cada cinco segundos.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Criar um script que gera partes ao jogo a cada 5 segundos em posições X e Z randômicas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Criar um spawner que adiciona objetos no workspace a cada cinco segundos em locais sortidas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Criar um spawner que coloca partes no mundo a cada cinco segundos em locais sortidas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Criar um programa que spawna objetos ao workspace a cada cinco segundos em posições X e Z variadas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Gerar apenas a configuração de spawn para partes a cada cinco segundos.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer um script para Roblox que gera peças a cada cinco segundos em pontos variadas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Criar só a parte que define onde os objetos aparecem a cada 5 segundos.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Gerar um spawner que cria blocos de tamanho fixo a cada cinco segundos em locais randômicas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer um spawner para Roblox que gera blocos a cada 5 segundos em pontos variadas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Criar um spawner que cria peças a cada 5 segundos em posições aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer um spawner para cria objetos no mundo a cada cinco segundos em posições variadas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Gerar um programa que coloca peças de tamanho fixo a cada cinco segundos em locais randômicas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer um spawner de blocos que cria a cada cinco segundos em coordenadas randômicas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Quero um código que gera peças no mundo com intervalo de 5 segundos e posições sortidas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Quero um spawner que adiciona objetos de tamanho fixo a cada cinco segundos em posições aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Quero só a função que cria um blocos em posição variadas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = Vector3.new(2, 2, 2)\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(-50, 50),\n        5,\n        math.random(-50, 50)\n    )\n    item.Parent = game:GetService(\"Workspace\")\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer um spawner de objetos que spawna a cada cinco segundos em coordenadas aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Gerar um programa Lua que cria peças no mundo a cada cinco segundos em coordenadas aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Gerar um código Lua que spawna objetos no jogo a cada 5 segundos em coordenadas sortidas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer um spawner de objetos que adiciona a cada cinco segundos em coordenadas variadas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Criar só a parte que define onde os peças aparecem a cada 5 segundos.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer um programa para Roblox que gera partes a cada 5 segundos em pontos sortidas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Gerar apenas a configuração de spawn para peças a cada cinco segundos.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Quero um código reduzido que spawna peças em randômicas sem loop.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Gerar um código Lua que spawna objetos no workspace a cada 5 segundos em coordenadas sortidas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer um spawner para Roblox que spawna peças a cada cinco segundos em pontos randômicas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Gerar apenas a configuração de spawn para blocos a cada 5 segundos.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Quero um código reduzido que adiciona peças em aleatórias sem loop.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Criar um spawner que spawna peças no workspace a cada cinco segundos em locais randômicas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Criar um spawner que cria objetos ao workspace a cada cinco segundos em posições X e Z randômicas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer um spawner de blocos que cria a cada 5 segundos em coordenadas variadas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Quero um programa que spawna peças de tamanho 2x2x2 a cada 5 segundos em coordenadas randômicas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer apenas a função de criar um peças no mundo em local aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = Vector3.new(2, 2, 2)\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(-50, 50),\n        5,\n        math.random(-50, 50)\n    )\n    item.Parent = game:GetService(\"Workspace\")\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Gerar um programa que spawna blocos de tamanho fixo a cada cinco segundos em locais randômicas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Quero um código que coloca objetos no jogo com intervalo de 5 segundos e posições aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer um código para cria peças no jogo a cada cinco segundos em posições randômicas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Gerar apenas a configuração de spawn para peças a cada 5 segundos.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Gerar um script que adiciona partes de tamanho fixo a cada 5 segundos em locais aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Quero um código reduzido que cria partes em variadas sem loop.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Gerar apenas a configuração de spawn para partes a cada 5 segundos.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Criar um script que coloca partes a cada 5 segundos em lugares variados.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Criar um spawner que spawna partes no mundo a cada 5 segundos em locais variadas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Gerar um spawner que adiciona peças de tamanho fixo a cada cinco segundos em locais aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Criar um script que coloca objetos a cada cinco segundos em coordenadas randômicas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Gerar um script Lua que coloca blocos no workspace a cada 5 segundos em coordenadas sortidas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Criar só a parte que define onde os peças aparecem a cada cinco segundos.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Criar um spawner que gera peças no jogo a cada cinco segundos em locais variadas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer um spawner de objetos que cria a cada cinco segundos em coordenadas variadas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer apenas a função de criar um peças no jogo em local variadas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = Vector3.new(2, 2, 2)\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(-50, 50),\n        5,\n        math.random(-50, 50)\n    )\n    item.Parent = game:GetService(\"Workspace\")\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Gerar um código que coloca peças de tamanho fixo a cada cinco segundos em locais variadas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Quero só a função que cria um partes em posição sortidas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = Vector3.new(2, 2, 2)\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(-50, 50),\n        5,\n        math.random(-50, 50)\n    )\n    item.Parent = game:GetService(\"Workspace\")\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Quero só a função que spawna um partes em posição variadas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = Vector3.new(2, 2, 2)\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(-50, 50),\n        5,\n        math.random(-50, 50)\n    )\n    item.Parent = game:GetService(\"Workspace\")\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer apenas a função de criar um peças no jogo em local aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = Vector3.new(2, 2, 2)\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(-50, 50),\n        5,\n        math.random(-50, 50)\n    )\n    item.Parent = game:GetService(\"Workspace\")\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Gerar apenas a configuração de spawn para partes a cada cinco segundos.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Criar só a parte que define onde os objetos aparecem a cada cinco segundos.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer apenas a função de criar um blocos no mundo em local variadas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = Vector3.new(2, 2, 2)\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(-50, 50),\n        5,\n        math.random(-50, 50)\n    )\n    item.Parent = game:GetService(\"Workspace\")\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Gerar um spawner que adiciona objetos de tamanho fixo a cada cinco segundos em locais aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Gerar um código que coloca blocos de tamanho fixo a cada 5 segundos em locais randômicas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Quero um código reduzido que adiciona blocos em randômicas sem loop.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Gerar um spawner Lua que coloca peças no workspace a cada cinco segundos em coordenadas randômicas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Criar um código que adiciona peças ao workspace a cada 5 segundos em posições X e Z sortidas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Criar um spawner que coloca peças no workspace a cada 5 segundos em locais variadas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer um código para cria peças no jogo a cada cinco segundos em posições variadas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Quero um código reduzido que gera partes em sortidas sem loop.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer um script para spawna peças no jogo a cada 5 segundos em posições aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Gerar um script que cria objetos de tamanho fixo a cada 5 segundos em locais sortidas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer um código para Roblox que cria partes a cada cinco segundos em pontos variadas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Gerar apenas a configuração de spawn para peças a cada 5 segundos.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer um programa para Roblox que spawna blocos a cada 5 segundos em pontos sortidas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Gerar um script que cria objetos de tamanho fixo a cada cinco segundos em locais aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer apenas a função de criar um peças no workspace em local sortidas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = Vector3.new(2, 2, 2)\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(-50, 50),\n        5,\n        math.random(-50, 50)\n    )\n    item.Parent = game:GetService(\"Workspace\")\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Quero um spawner que gera objetos de tamanho fixo a cada cinco segundos em coordenadas randômicas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Gerar um spawner que coloca objetos de tamanho fixo a cada 5 segundos em locais sortidas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Criar um spawner que coloca partes no jogo a cada 5 segundos em locais randômicas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer apenas a função de criar um objetos no mundo em local sortidas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = Vector3.new(2, 2, 2)\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(-50, 50),\n        5,\n        math.random(-50, 50)\n    )\n    item.Parent = game:GetService(\"Workspace\")\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer um script para Roblox que adiciona blocos a cada 5 segundos em pontos sortidas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Quero só a função que adiciona um partes em posição variadas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = Vector3.new(2, 2, 2)\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(-50, 50),\n        5,\n        math.random(-50, 50)\n    )\n    item.Parent = game:GetService(\"Workspace\")\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Criar um spawner que cria partes ao jogo a cada cinco segundos em posições X e Z aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Gerar um código Lua que gera blocos no mundo a cada 5 segundos em coordenadas aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Criar só a parte que define onde os objetos aparecem a cada cinco segundos.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer um spawner para coloca partes no mundo a cada 5 segundos em posições randômicas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Gerar apenas a configuração de spawn para objetos a cada cinco segundos.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Gerar apenas a configuração de spawn para blocos a cada cinco segundos.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Quero um código que coloca blocos no workspace com intervalo de cinco segundos e posições sortidas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Gerar um programa que gera objetos de tamanho fixo a cada 5 segundos em locais aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Gerar apenas a configuração de spawn para blocos a cada 5 segundos.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Criar um spawner que spawna partes no jogo a cada cinco segundos em locais aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer apenas a função de criar um partes no jogo em local variadas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = Vector3.new(2, 2, 2)\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(-50, 50),\n        5,\n        math.random(-50, 50)\n    )\n    item.Parent = game:GetService(\"Workspace\")\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Criar um spawner que spawna partes ao jogo a cada 5 segundos em posições X e Z randômicas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Quero um código que gera blocos no jogo com intervalo de cinco segundos e posições randômicas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Criar um spawner que gera peças no workspace a cada cinco segundos em locais aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer apenas a função de criar um peças no workspace em local randômicas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = Vector3.new(2, 2, 2)\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(-50, 50),\n        5,\n        math.random(-50, 50)\n    )\n    item.Parent = game:GetService(\"Workspace\")\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer um script para Roblox que gera objetos a cada 5 segundos em pontos sortidas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Criar um script que coloca peças ao jogo a cada 5 segundos em posições X e Z sortidas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Criar um spawner que cria peças ao workspace a cada cinco segundos em posições X e Z sortidas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Gerar um script Lua que cria peças no workspace a cada cinco segundos em coordenadas variadas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Quero um código que spawna objetos de tamanho fixo a cada cinco segundos em posições aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer um código para Roblox que coloca objetos a cada cinco segundos em pontos randômicas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Criar um spawner que adiciona partes a cada cinco segundos em lugares variados.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Criar um programa que coloca peças a cada 5 segundos em coordenadas randômicas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer um script para Roblox que spawna blocos a cada 5 segundos em pontos randômicas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Quero um código que spawna peças no workspace com intervalo de 5 segundos e posições variadas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Quero um código reduzido que adiciona partes em aleatórias sem loop.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Gerar apenas a configuração de spawn para objetos a cada 5 segundos.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer um código para Roblox que spawna objetos a cada 5 segundos em pontos randômicas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Gerar apenas a configuração de spawn para objetos a cada cinco segundos.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Criar só a parte que define onde os partes aparecem a cada 5 segundos.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer um spawner para Roblox que gera objetos a cada 5 segundos em pontos aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Criar só a parte que define onde os objetos aparecem a cada 5 segundos.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Quero um código que coloca objetos de tamanho 2x2x2 a cada 5 segundos em lugares variados.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Criar um spawner que adiciona objetos no jogo a cada 5 segundos em locais aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Quero um código reduzido que gera blocos em variadas sem loop.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer apenas a função de criar um peças no jogo em local randômicas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = Vector3.new(2, 2, 2)\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(-50, 50),\n        5,\n        math.random(-50, 50)\n    )\n    item.Parent = game:GetService(\"Workspace\")\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer um script para spawna objetos no jogo a cada 5 segundos em posições sortidas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Quero um código reduzido que spawna partes em aleatórias sem loop.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer um script para Roblox que coloca partes a cada 5 segundos em pontos randômicas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Quero só a função que gera um blocos em posição sortidas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = Vector3.new(2, 2, 2)\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(-50, 50),\n        5,\n        math.random(-50, 50)\n    )\n    item.Parent = game:GetService(\"Workspace\")\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Criar um programa que gera objetos a cada 5 segundos em coordenadas randômicas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer um spawner de partes que cria a cada 5 segundos em coordenadas randômicas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer um script para Roblox que spawna peças a cada cinco segundos em pontos aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer um spawner de blocos que adiciona a cada cinco segundos em coordenadas variadas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Gerar um spawner que spawna partes de tamanho fixo a cada cinco segundos em locais variadas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Quero um código que adiciona partes no mundo com intervalo de cinco segundos e posições variadas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Quero só a função que adiciona um blocos em posição variadas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = Vector3.new(2, 2, 2)\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(-50, 50),\n        5,\n        math.random(-50, 50)\n    )\n    item.Parent = game:GetService(\"Workspace\")\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Quero só a função que spawna um blocos em posição sortidas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = Vector3.new(2, 2, 2)\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(-50, 50),\n        5,\n        math.random(-50, 50)\n    )\n    item.Parent = game:GetService(\"Workspace\")\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Quero um código que adiciona peças de tamanho 2x2x2 a cada 5 segundos em coordenadas randômicas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Quero um código reduzido que cria partes em aleatórias sem loop.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Quero um código reduzido que adiciona peças em sortidas sem loop.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Gerar um código Lua que coloca blocos no mundo a cada 5 segundos em coordenadas aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Gerar um script Lua que gera partes no mundo a cada cinco segundos em coordenadas randômicas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Gerar um programa Lua que cria objetos no jogo a cada 5 segundos em coordenadas randômicas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Quero um código que coloca peças no mundo com intervalo de cinco segundos e posições variadas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Criar um spawner que adiciona peças no jogo a cada cinco segundos em locais sortidas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer um spawner de objetos que cria a cada 5 segundos em coordenadas randômicas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Quero um código que cria objetos de tamanho 2x2x2 a cada 5 segundos em lugares variados.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Gerar um script Lua que coloca objetos no jogo a cada cinco segundos em coordenadas sortidas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer um spawner de partes que cria a cada 5 segundos em coordenadas sortidas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer apenas a função de criar um partes no jogo em local aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = Vector3.new(2, 2, 2)\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(-50, 50),\n        5,\n        math.random(-50, 50)\n    )\n    item.Parent = game:GetService(\"Workspace\")\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Criar um spawner que gera blocos no workspace a cada cinco segundos em locais randômicas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Quero só a função que cria um blocos em posição variadas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = Vector3.new(2, 2, 2)\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(-50, 50),\n        5,\n        math.random(-50, 50)\n    )\n    item.Parent = game:GetService(\"Workspace\")\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Gerar apenas a configuração de spawn para blocos a cada 5 segundos.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Quero um código que adiciona blocos no jogo com intervalo de cinco segundos e posições aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Gerar um script Lua que spawna peças no mundo a cada 5 segundos em coordenadas variadas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Gerar um código Lua que cria partes no mundo a cada 5 segundos em coordenadas variadas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Criar um spawner que adiciona objetos no jogo a cada 5 segundos em locais randômicas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Criar um spawner que adiciona peças a cada cinco segundos em lugares variados.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Quero um código que coloca partes no jogo com intervalo de 5 segundos e posições variadas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Gerar apenas a configuração de spawn para blocos a cada 5 segundos.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Quero um código que gera peças no jogo com intervalo de cinco segundos e posições variadas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer um script para Roblox que cria partes a cada cinco segundos em pontos aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer um código para adiciona blocos no jogo a cada cinco segundos em posições sortidas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer apenas a função de criar um peças no jogo em local variadas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = Vector3.new(2, 2, 2)\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(-50, 50),\n        5,\n        math.random(-50, 50)\n    )\n    item.Parent = game:GetService(\"Workspace\")\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Quero um código reduzido que cria peças em randômicas sem loop.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer um spawner de partes que adiciona a cada 5 segundos em coordenadas sortidas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Gerar apenas a configuração de spawn para objetos a cada 5 segundos.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Quero um programa que cria blocos de tamanho fixo a cada 5 segundos em posições aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer um spawner para adiciona blocos no workspace a cada cinco segundos em posições aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer um script para coloca objetos no workspace a cada 5 segundos em posições randômicas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer um spawner para coloca peças no jogo a cada 5 segundos em posições aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Quero um código reduzido que coloca partes em randômicas sem loop.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Quero um programa que spawna objetos de tamanho fixo a cada 5 segundos em coordenadas randômicas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Criar um spawner que cria objetos no jogo a cada cinco segundos em locais variadas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Gerar um código que coloca objetos de tamanho fixo a cada 5 segundos em locais sortidas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Criar só a parte que define onde os peças aparecem a cada 5 segundos.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Gerar apenas a configuração de spawn para peças a cada 5 segundos.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Criar só a parte que define onde os blocos aparecem a cada 5 segundos.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Gerar um spawner Lua que adiciona blocos no mundo a cada 5 segundos em coordenadas sortidas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Gerar apenas a configuração de spawn para peças a cada cinco segundos.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Criar só a parte que define onde os objetos aparecem a cada cinco segundos.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Criar só a parte que define onde os objetos aparecem a cada cinco segundos.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Gerar um código Lua que spawna objetos no workspace a cada cinco segundos em coordenadas variadas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Criar um script que gera partes a cada cinco segundos em lugares variados.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Quero um código que spawna peças no jogo com intervalo de cinco segundos e posições randômicas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Quero um script que gera partes de tamanho fixo a cada cinco segundos em lugares variados.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Gerar apenas a configuração de spawn para peças a cada cinco segundos.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer apenas a função de criar um partes no workspace em local aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = Vector3.new(2, 2, 2)\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(-50, 50),\n        5,\n        math.random(-50, 50)\n    )\n    item.Parent = game:GetService(\"Workspace\")\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer um script para Roblox que spawna blocos a cada 5 segundos em pontos variadas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer apenas a função de criar um partes no workspace em local aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = Vector3.new(2, 2, 2)\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(-50, 50),\n        5,\n        math.random(-50, 50)\n    )\n    item.Parent = game:GetService(\"Workspace\")\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer um programa para gera partes no workspace a cada 5 segundos em posições variadas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer um programa para cria objetos no mundo a cada cinco segundos em posições aleatórias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer um spawner de objetos que cria a cada cinco segundos em coordenadas sortidas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer um spawner de blocos que adiciona a cada cinco segundos em coordenadas variadas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer um spawner de partes que cria a cada 5 segundos em coordenadas sortidas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Gerar apenas a configuração de spawn para peças a cada 5 segundos.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Gerar apenas a configuração de spawn para blocos a cada 5 segundos.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Quero um código que cria objetos no workspace com intervalo de cinco segundos e posições randômicas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer apenas a função de criar um partes no workspace em local randômicas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = Vector3.new(2, 2, 2)\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(-50, 50),\n        5,\n        math.random(-50, 50)\n    )\n    item.Parent = game:GetService(\"Workspace\")\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Fazer um programa para cria partes no workspace a cada cinco segundos em posições variadas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: ItemSpawner\n    Local: ServerScriptService\n    Autor: Generated by Python Script\n    Descrição: Spawna blocos ('Part') a cada X segundos em posições aleatórias no mundo.\n]]\n\n-- Serviço necessário\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}\n\n-- Função que cria e posiciona o item\nlocal function spawnItem()\n    local item = Instance.new(\"Part\")\n    item.Name = \"SpawnedItem\"\n    item.Size = ITEM_SIZE\n    item.Anchored = false\n    item.Position = Vector3.new(\n        math.random(SPAWN_AREA.MinX, SPAWN_AREA.MaxX),\n        SPAWN_AREA.Y,\n        math.random(SPAWN_AREA.MinZ, SPAWN_AREA.MaxZ)\n    )\n    item.Parent = Workspace\nend\n\n-- Loop principal\nwhile true do\n    spawnItem()\n    wait(SPAWN_INTERVAL)\nend",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  },
  {
    "timestamp": "2025-06-17T12:23:58.796678",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Parâmetros/comand_bar",
    "prompt": "Criar só a parte que define onde os blocos aparecem a cada cinco segundos.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Configurações de spawn\nlocal SPAWN_INTERVAL = 5 -- segundos\nlocal ITEM_SIZE = Vector3.new(2, 2, 2)\nlocal SPAWN_AREA = {\n    MinX = -50,\n    MaxX = 50,\n    MinZ = -50,\n    MaxZ = 50,\n    Y = 5\n}",
    "metadata": {
      "script_name": "ItemSpawner",
      "location": "ServerScriptService",
      "description": "Spawns parts ('Part') every X seconds in random positions in the world."
    }
  }
]